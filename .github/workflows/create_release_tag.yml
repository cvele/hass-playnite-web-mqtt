name: Auto Create Tag & Release

on:
  pull_request:
    branches:
      - release
    types:
      - closed

jobs:
  create_tag_release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Check if PR is from a r/v*.*.* branch
        id: check_branch
        run: |
          PR_BRANCH=$(echo "${{ github.event.pull_request.head.ref }}")
          if [[ "$PR_BRANCH" =~ ^r/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "PR_BRANCH=$PR_BRANCH" >> $GITHUB_ENV
            exit 0
          fi
          exit 1

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          trust_level: 5
          git_config_global: true

      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          ref: "release"
          fetch-depth: 0

      - name: Read version from VERSION file
        id: read_version
        run: |
          if [ -f "VERSION" ]; then
            VERSION=$(cat VERSION)
            echo "VERSION=$VERSION" >> $GITHUB_ENV
            echo "Version found: $VERSION"
          else
            echo "VERSION file not found, skipping."
            exit 1
          fi

      - name: Check if tag already exists
        run: |
          git fetch --tags
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
              echo "Tag $VERSION already exists. Exiting."
              exit 1
          fi

      - name: Read changelog from CHANGELOG.md
        id: read_changelog
        run: |
          if [[ -f "CHANGELOG.md" ]]; then
            CHANGELOG=$(cat CHANGELOG.md)
            echo "CHANGELOG<<EOF" >> $GITHUB_ENV
            echo "$CHANGELOG" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            echo "CHANGELOG found."
          else
            echo "CHANGELOG file not found, skipping."
            exit 1
          fi

      - name: Create and push tag
        id: create_tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a ${{ env.VERSION }} -m "${{ env.VERSION }}" --sign
          git push origin --tags

      - name: Create GitHub Release using GitHub CLI
        run: |
          gh release create ${{ env.VERSION }} \
            --title "${{ env.VERSION }}" \
            --notes-file CHANGELOG.md \
            --target release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
